void allocate_activity(Student& student, Club& club) {
    if (club.male_count + club.female_count < club.capacity) {
        club.male_count += student.gender == Gender::MALE ? 1 : 0;
        club.female_count += student.gender == Gender::FEMALE ? 1 : 0;
        student.activities.push_back(ActivityType::CLUB);
    }
}

void allocate_activity(Student& student, Sport& sport) {
    if (sport.male_count + sport.female_count < sport.capacity) {
        sport.male_count += student.gender == Gender::MALE ? 1 : 0;
        sport.female_count += student.gender == Gender::FEMALE ? 1 : 0;
        student.activities.push_back(ActivityType::SPORT);
    }
}

void allocate_activity(Student& student) {
    if (student.activities.empty() < 1) {
        for (auto& club : clubs) { // Change const auto& to auto&
            if (club.capacity > 0 && is_valid_club_allocation(club)) {
                allocate_activity(student, club);
                break;
            }
        }
    }
}




void allocate_activities(Student& student) {
    if (student.activities.size() < 2) {
        for (auto& sport : sports) { // Change const auto& to auto&
            if (sport.capacity > 0 && is_valid_sport_allocation(sport)) {
                allocate_activity(student, sport);
                break;
            }
        }
    }
}


void print_menu() {
    std::cout << "1. Add Student\n"
              << "2. View Students (ALL and per group) \n"
              << "3. View Clubs/ Societies \n"
              << "4. View Sports \n"
              << "5. View Grouped Students \n"
              << "6. Save all Files \n"
              << "7. Exit \n";
}